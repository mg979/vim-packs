*vpacks.txt*    *vpacks*    Package manager for vim

Author: mg979

For Vim version 8.0 and above (and `neovim`).

==============================================================================

1. Overview                                                  |vpacks-overview|
2. Commands                                                  |vpacks-commands|
3. Examples                                                  |vpacks-examples|



==============================================================================
                                                             *vpacks-overview*
1. Overview

These are not the instructions for the package manager itself.
Run `vpacks -h` in a terminal for that.

The following commands aren't necessary for the plugins to work, if
you put them in your `pack/*/start/` directories. But if you decide to use
these commands, you should keep all the packages that you want to manage from
within Vim in the `pack/*/opt/` directories.

You could want to do this for one of the following reasons:

* you want to lazy load some plugins
* you want greater control on which plugins to load
* you want a way to have from Vim an overview of the installed plugins
* you are making the transition from another plugin manager

The syntax is meant to be very similar to the one used by |vim-plug| {1}.

                                      {1} https://github.com/junegunn/vim-plug



==============================================================================
                                                             *vpacks-commands*
2. Commands

                                                                       *:Pack*
:Pack[!] {url} [, {options}]

  Wrapper for vim's |packadd| command.

`bang`: with bang, the package is immediately sourced, otherwise it is loaded
      in the part of the vim initialization where packages/plugins are loaded.
      That is, the behaviour is reversed: `Pack` behaves like `packadd!` and
      `Pack!` like `packadd`. This is so, because the `Pack` command makes
      more sense if put in the vimrc.

`url`: can have several forms:

  `plugin`          a local plugin
  `user/plugin`     a GitHub repo
  `gh/user/plugin`  ,, ,,
  `gl/user/plugin`  a GitLab repo
  `http(s)://...`   any repo

  It's not necessary for the url to be valid, for the plugin to be loaded. It
  will only be necessary if you want to install the plugins from vim, rather
  than the command line. See |PacksInstall|.

`options`: must be put in a dictionary.
                                                                      example~
  'for'     lazy load for filetype                           `{'for': 'python'}`
  'on'      lazy load when ex command is run                 `{'on': 'Explore'}`
  'pdir'    install in pack/{pdir}/, not in pack/vpacks/     `{'pdir': 'tpope'}`
  'dir'     can't be managed, but add to runtimepath         `{'dir': '~/.fzf'}`
  'has'     load if has(condition) is satisfied              `{'has': 'nvim'}`
  'full'    when installing, perform non-shallow cloning     `{'full': 1}`

                                                                 *:PacksCheck*
:PacksCheck

    Open a diagnostic buffer, that shows which packages have been loaded,
    which are being lazy loaded, their options, and errors if any occurred.
    Pressing `I` on the line of an uninstalled package will try to install it,
    if the url is valid.

                                                               *:PacksInstall*
:PacksInstall

    Install all missing packages that have been added with the |Pack| command.

                                                                     *:Vpacks*
:Vpacks {args}

    Wrapper for `vpacks` that can be run in a vim terminal buffer, if this is
    supported by your vim version.

Note that there is no specific command to update packages: update from the
command line, or with `Vpacks update` from vim.



==============================================================================
                                                             *vpacks-examples*
3. Examples
>
  " first add vpacks itself, so that commands will run
  " don't use bang, and be sure that vpacks is in a /opt directory
  " see ':help initialization' for more infos
  packadd vim-packs

  " packadd! a plugin, complete with repo address
  Pack 'tpope/vim-surround'

  " packadd a plugin, complete with repo address
  " with bang the package will be immediately added to &rtp and sourced
  Pack! 'vim-airline/vim-airline'

  " a local plugin can still be updated, if it is a valid repo with remotes
  Pack 'vim-fugitive'

  " install in specific pack/ subdirectory
  Pack 'tpope/vim-surround', {'pdir': 'tpope'}

  " lazy load plugins for specific filetypes, disable shallow cloning
  Pack 'davidhalter/jedi-vim', {'for': 'python', 'full': 1}

  " lazy load plugins on specific commands
  Pack 'Olical/vim-enmasse', { 'on': 'EnMasse' }

  " also working with lists, and plugs
  Pack 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }

  " not a package, but add to &rtp anyway, cannot be installed or updated
  Pack 'junegunn/fzf', { 'dir': '~/.fzf' }

  " infos about added package, and errors about missing packages
  PacksCheck

  " load if has(condition) is satisfied
  Pack 'vim-airline/vim-airline', {'has': 'nvim'}

  " update a specific package from Vim
  Vpacks update vim-fugitive

  " install a new package from Vim
  Vpacks install tpope/vim-commentary
<


vim:tw=78:ts=8:ft=help:norl:

